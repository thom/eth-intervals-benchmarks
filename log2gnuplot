#!/usr/bin/env ruby 

require 'trollop'

class Log2Gnuplot
  VERSION = '0.0.1'
  
  attr_reader :options

  def initialize
    @options = Trollop::options do
      version "log2gnuplot #{VERSION} (c) 2010 Thomas Weibel"
      banner <<-EOS
Converts benchmark logs into Gnuplot data files

Usage:
       log2gnuplot [options]
where [options] are:
EOS

      opt :file, "log file", :type => String
      opt :kbest, "k-best, use 0 for average over all", :type => Integer, :default => 0
      opt :title, "title", :type => String
      opt :desc, "description column"
    end

    Trollop::die :file, "file name must be given" if @options[:file] == nil
    Trollop::die :file, "file must exist" unless File.exist?(@options[:file]) if @options[:file]
    Trollop::die :kbest, "must be >= 0" unless @options[:kbest] >= 0
  end

  # Parse options, check arguments, then process the command
  def run
    process_file(@options[:file])
  end
  
  protected
  
  def process_file(file)
    File.open(file, "r") do |infile|
      # Print title
      if @options[:title] != nil
        title_row = ""
        if @options[:desc]
          title_row += "\"Name\"\t"
        end
        print title_row + "\"" +@options[:title] + "\"\n"
      end

      while (line = infile.gets)
        # Match beginning of benchmarks
        if (/^begin\((.*)\)/ =~ line)
          headings = true
          name = $1
          i = 0
          results = Array.new
          columns = Array.new
          next
        end

        # Process headings
        if headings
          headings = false
          benchmarks = true
          titles = line.split(/\s+/)
          next
        end

        # Match end of benchmarks
        if (/^end\(#{name}\)/ =~ line)
          benchmarks = false

          case name
          when "jgfmt.section3.JGFMolDynBench"
            interim_results = 2
          when "jgfmt.section3.JGFMonteCarloBench"
            interim_results = 2
          when "jgfmt.section3.JGFRayTracerBench"
            interim_results = 3
          else
            interim_results = 1
          end

          for k in (0..results[0].size-1)
            columns[k] = Array.new
            for j in (0..results.size-1)
              # puts j.to_s + ", " + k.to_s + ": " + results[j][k]
              if ((j+1) % interim_results == 0)
                columns[k] << results[j][k].to_f
              end
            end
          end

          kbest = @options[:kbest]
          denominator = (results.size / interim_results)

          unless kbest <= denominator
            puts "Error: argument --kbest must be <= " + denominator.to_s
            exit 1
          end

          average_results = columns.map { |column|
            if kbest == 0
              column.inject { |result, element|
                result + element
              } / denominator
            else
              column.sort[0..kbest-1].inject { |result, element|
                result + element
              } / kbest
            end
          }

          if (/^jgfmt\.section.\.JGF(.*)Bench$/ =~ name)
            nice_name = $1
          else
            nice_name = name
          end

          titles.map! { |title|
            if (/^Size(.)$/ =~ title)
              nice_title = $1
            else
              nice_title = title
            end

            '"' + nice_name + " (" + nice_title + ")" + '"'
          }

          if @options[:desc] 
            titles.zip(average_results).each { |row|
              row.each { |element|
                print element.to_s + "\t"
              }
              print "\n"
            }
          else
            average_results.each { |row|
              print row.to_s + "\n"
            }
          end
        end

        # Process benchmarks
        if benchmarks
          results[i] = line.split(/\s+/)
          i += 1
        end
      end
    end
  end
end

# Create and run the application
app = Log2Gnuplot.new
app.run
